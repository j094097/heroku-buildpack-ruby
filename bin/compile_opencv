#!/usr/bin/env bash
# bin/compile_opencv <build-dir> <cache-dir>

# fail fast
set -e

indent() {
  sed -u 's/^/       /'
}

build=$1
cache=$2

mkdir -p $build
mkdir -p $cache

cmake_version="3.2.3"
cmake_url="http://www.cmake.org/files/v3.2/cmake-${cmake_version}.tar.gz"
cmake_file="cmake-${cmake_version}.tar.gz"
cmake_tar_dir="cmake-${cmake_version}"

opencv_version="3.0.0"
opencv_dir="opencv-${opencv_version}"
opencv_file="${opencv_dir}.tar.gz"
opencv_url="https://codeload.github.com/Itseez/opencv/tar.gz/${opencv_version}"

cache_target=${cache}/${cmake_file}
build_target=${build}/.heroku
target=/app/.heroku

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Building..." | indent

  mkdir -p $target

  cd $build

  echo "Compiling cmake v${cmake_version}..." | indent

  curl -s ${cmake_url} > ${cmake_file}

  echo "Downloading..." | indent

  tar zxf ${cmake_file}
  cd ${cmake_tar_dir}
  ./bootstrap --prefix=${target} | indent
  make | indent
  make install | indent
  cd ..

  tar czf ${cache_target} -C ${target} .
fi

mkdir -p $build_target
tar xzf $cache_target -C $build_target
PATH=$build_target/bin:$PATH

echo "Cmake Complete..." | indent

echo "Opencv Start..." | indent

BUILD_DIR=$1
CACHE_DIR=$2

# fetch and cache the vulcan build
OPENCV_PACKAGE="http://s3.amazonaws.com/tznode/vulcan-compiled-opencv.tgz"
OPENCV_PACKAGE_ETAG=$(curl -s --head "$OPENCV_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
VENDORED_OPENCV="/app/vendor/opencv"
OPENCV_CACHE="$CACHE_DIR/opencv_$OPENCV_PACKAGE_ETAG";

if [ -d "$OPENCV_CACHE" ]; then
  echo "-----> Reusing cached OpenCV ($OPENCV_PACKAGE_ETAG)"
  cp -a $OPENCV_CACHE $VENDORED_OPENCV
else
  echo "-----> Fetching and caching OpenCV ($OPENCV_PACKAGE_ETAG)"
  mkdir -p $VENDORED_OPENCV
  curl $OPENCV_PACKAGE -s -o - | tar xzf - -C $VENDORED_OPENCV
  mkdir -p $CACHE_DIR
  cp -a $VENDORED_OPENCV $OPENCV_CACHE
fi

# vendor
echo "-----> Vendoring OpenCV shared objects into slug"
VENDORED_SO="$BUILD_DIR/vendor/opencv/lib"
mkdir -p $VENDORED_SO
cp -a "$VENDORED_OPENCV/lib/." $VENDORED_SO

# runtime
mkdir -p "$BUILD_DIR/.profile.d"

#echo "export LD_LIBRARY_PATH=\"\$HOME/vendor/opencv/lib:\$LD_LIBRARY_PATH\"" > $BUILD_DIR/.profile.d/opencv.sh
#echo "export PKG_CONFIG_PATH=\"\$HOME/vendor/opencv/lib/pkgconfig:\$PKG_CONFIG_PATH\"" >> $BUILD_DIR/.profile.d/opencv.sh

ls -la $BUILD_DIR/*
ls -la $target/*

echo "export PATH=\$target/bin:\$PATH" > $BUILD_DIR/.profile.d/opencv.sh


# cache_target=$cache/$opencv_file
# build_target=$build/.heroku

# if [ ! -f $cache_target ]; then
#   mkdir -p $target

#   echo "No cached compile detected. Building..." | indent

#   opencv_package="http://s3.amazonaws.com/tznode/vulcan-compiled-opencv.tgz"
#   # download open cv
#   vendored_opencv="/app/vendor/opencv"
#   mkdir -p $vendored_opencv
#   curl $opencv_package -s -o - | tar xzf - -C $vendored_opencv

#   # copy open cv libs to build dir
#   mkdir -p $build/lib
#   cp -a "$vendored_opencv/lib/." "$build/lib/"

#   tar czf $cache_target -C $vendored_opencv .
# fi

# mkdir -p $build_target
# tar xzf $cache_target -C $build_target

# mkdir -p $build/.profile.d

# # ls -la $build/*
# # ls -la $target/*

# echo "export PATH=\$target/bin:\$PATH" > $build/.profile.d/opencv.sh
